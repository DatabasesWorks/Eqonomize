<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY eqonomize "<application>Eqonomize!</application>">
  <!ENTITY kappname "&eqonomize;"><!-- Do *not* replace kappname-->
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title>The &eqonomize; Handbook</title>

<authorgroup>
<author>
<firstname>Hanna</firstname>
<othername></othername>
<surname>K.</surname>
<affiliation>
<address><email>hanna_k@fmgirl.com</email></address>
</affiliation>
</author>
</authorgroup>

<!-- TRANS:ROLES_OF_TRANSLATORS -->

<copyright>
<year>2008</year>
<holder>Hanna Knutsson</holder>
</copyright>
<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook
     and in the FDL itself on how to use it. -->
<legalnotice>&FDLNotice;</legalnotice>

<date>2006-09-05</date>
<releaseinfo>0.4</releaseinfo>


<abstract>
<para>
	&eqonomize; is a personal accounting software, with focus on efficiency and ease of use for the small household economy. &eqonomize; provides a complete solution, with bookkeeping by double entry and support for scheduled recurring transactions, security investments, and budgeting. It gives a clear overview of past and present transactions, and development of incomes and expenses, with descriptive tables and charts, as well as an approximation of future account values.
</para>
</abstract>

<keywordset>
<keyword>KDE</keyword>
<keyword>Eqonomize</keyword>
<keyword>Money</keyword>
<keyword>Finances</keyword>
<keyword>Bookkeeping</keyword>
<keyword>Budget</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title>Introduction</title>

<para>
	&eqonomize; is a tool for keeping track of and monitoring personal finances. This means entering of everyday expenses and incomes – when you buy something, receive salary, pay bills, transfer money between bank accounts, invest in stock, etc. &eqonomize; provides tools for making this process as easy and efficient as possible. You can then effortlessly retrieve information and statistics about your financial situation. You will for example be able to easily identify major leaks, and direct saving efforts to the right areas. You can also monitor performance in relation to a budget and check what your choices might mean for your future wealth.
</para>
<para>
	The purpose of this manual is to describe how to practically use &eqonomize; for those who do not find the graphical user interface self-explanatory, as well as document some less obvious efficiency-enhancing features and explain how &eqonomize; interprets the data you provide.
</para>
<para>
	When first using &eqonomize; you should read <xref linkend="using-eqonomize"/>; especially the first parts <xref linkend="accounts_and_categories"/> and <xref linkend="transactions"/>, which step by step describes how to begin using the basic features.
</para>
<para>
	<xref linkend="accounting"/> provides a more theoretic explanation and description of &eqonomize;' approach to accounting.
</para>
<para>
	In addition there are some reference sections.
</para>
</chapter>

<chapter id="using-eqonomize">
<title>Gettings Started</title>

<para>
	The main window consists of six different views. When &eqonomize; is started, the account view is shown. To change view click on the corresponding icon in the horizontal list above.
</para>

<sect1 id="accounts_and_categories">
	<title>Accounts &amp; Categories</title>
	<para>
		The first time you start &eqonomize; the account view is displayed with a predefined set of accounts and categories. These can be considered as an example or a starting point for a setup matching your own conditions. You can either begin by modifying the suggested accounts and categories or start from scratch with <menuchoice><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice> (<keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo>).
	</para>
	<mediaobject><imageobject><imagedata format="PNG" fileref="new-account.png"/></imageobject></mediaobject>
	<para>
		Accounts should be created to match your real world bank accounts plus at least one account for your cash. Categories are used to keep incomes and expenses better organised. Each transaction must be connected to an account and a category, or two accounts for transfers between accounts. To create accounts and categories use <guimenu>Accounts</guimenu> menu or the context menu in the list. Accounts and categories can also be added as needed when entering new transactions.
	</para>
	<sect2 id="budget">
		<title>Budget</title>
		<para>
			&eqonomize; allows you to specify a budget for each month and category. This way you can continuously compare actual and planned expenses. You can also check what your current budget will mean for your future wealth.
		</para>		
		<para>
			A budget is initially asked for when creating a category. Then you can update it from the budget tab at the bottom of the accounts view, for the category selected in the list. If the budget has not been set for a month, the budget for the previous month is used.
			<mediaobject><imageobject><imagedata format="PNG" fileref="edit-budget.png"/></imageobject></mediaobject>
		</para>
		<para>
			You can choose to set budgets for only some categories. In the accounts list, budget and remaining budget (budget - expenses/incomes) is displayed in the second column. If not all categories have a budget, the total remaining budget only summarises the categories with budget and thus does not include actual expenses/incomes from other categories.
		</para>
	</sect2>
	<sect2 id="account_view">
		<title>The Accounts View</title>		
		<para>
			The account view displays a list of all accounts and categories, sorted alphabetically under each main type – accounts, incomes, and expenses. The rows for the main types displays the sum of all accounts/categories below.
		</para>
		<mediaobject><imageobject><imagedata format="PNG" fileref="accounts-view.png"/></imageobject></mediaobject>
		<para>
			The list has four columns. The first simply displays the name of the account or category. The second does for categories display the budget for the selected period and what is left of the budget. Unless the <guibutton>Show partial budget</guibutton> option is checked, the budget (and remaining budget) is displayed for whole months, thus you can in the default mode see whats left to spend of the current monthly budget. The third column displays the change in value, while the last column displays the total value.
		</para>
		<para>
			In the bottom of the accounts view, there is a box for selection period. The period controls within which dates statistics will be shown in the list. If the button for the from (start) date is unchecked, all transactions up til and including the to (end) date will be included. The third, <guilabel>Change</guilabel>, column displays the value of all transactions that occurred between the two dates – the change in total value from start to end date. The last column (<guilabel>Total</guilabel>) displays the total value of all transaction up til and including the end date, plus the initial balance for accounts. If from date is unset, change and total will be equal for all categories. For accounts the total represents the actual money present at the end date, and change the profit during the period.
		</para>
		<para>
			By default, the period is set to run from the beginning of the current month to (including) current date. Thus, the current state of accounts and transactions so far during the month are shown.
		</para>
		<para>
			Values for future dates are based on budgets and scheduled transactions (whichever is greatest). An account can be designated as budget account (default for current accounts), meaning that budgeted change will be added to the statistics displayed for this account. Otherwise this will only be added to the summarising account item (thus it will not necessarily equal the sum of account statistics).
		</para>
	</sect2>
</sect1>

<sect1 id="transactions">
	<title>Transactions</title>
	<para>
		After accounts and categories have been added, you can start recording transactions each time money have been deposited or withdrawn from one of you accounts. If you have kept book before, either on paper, or in another program, you can either import a file (see <xref linkend="import_export"/>) or enter each transaction manually by hand. Just remember to enter the correct opening balance for each account.
	</para>
	<para>
		Transactions can be entered in two ways, either with the new expense/income/transfer dialogs (where you have the option to create a recurring transaction), or from the transaction views. The latter option is usually preferred.
	</para>
	<sect2 id="transactions_expenses">
		<title>Expenses</title>
		<mediaobject><imageobject><imagedata format="PNG" fileref="expenses-view.png"/></imageobject></mediaobject>
		<para>
			The first time you record an expense you should follow these steps:
			<orderedlist>
				<listitem><para>Switch to the expenses view, using the top icons. The input focus is now in the description entry.</para></listitem>
				<listitem><para>Type in a description for the expense. Your free to use the description property as you want, but I suggest you keep short and consistent without any inflections, as a subcategory for optimum efficiency and good statistics. For example, if you buy a delicious red Ingraid Marie apple and have an expense category for fruit, the description will be <quote>Apple</quote>, and if you want to record additional information put <quote>Delicious red Ingraid Marie apple</quote> as comment (others might find it more appropriate to use <quote>Groceries</quote> as category and <quote>Fruit</quote> as description). Press <keycap>Enter</keycap> or <keycap>Tab</keycap> and focus will move to the cost entry.</para></listitem>
				<listitem><para>Enter what you paid. Note that the value should not be negative (except for refunds) and you do not need to type in currency. Press <keycap>Enter</keycap> or <keycap>Tab</keycap>.</para></listitem>
				<listitem><para>Optionally enter a quantity (if you bought multiple apples). Note that the previously entered value is the total cost and independent of the quantity. This and the payee field can be hidden from the settings menu if not used. Press <keycap>Enter</keycap> or <keycap>Tab</keycap>.</para></listitem>
				<listitem><para>Select the date when the transaction occurred. To change the date, either write a valid date, select one from the pop-up calendar, or increment/decrement the displayed date with up/down keys. If you now press <keycap>Enter</keycap>, the new expense record will be created, but we do not do that now since the current account and category probably are not correct.</para></listitem>
				<listitem><para>Select the correct account (where the money for the expense is taken from) and expense category from the drop-down lists on the right.</para></listitem>
				<listitem><para>Optionally enter a payee (the store where you bought the apple).</para></listitem>
				<listitem><para>Optionally enter a comment (memo) for the expense.</para></listitem>
				<listitem><para>Click <guibutton>Add</guibutton> or press <keycap>Enter</keycap>.</para></listitem>
			</orderedlist>
			<note><para><keycap>Enter</keycap> adds a transaction if pressed with input focus in the date or comment entry. Otherwise it moves input focus to the next entry.</para></note>
			Repeat the process to record another expense. When you enter the next (and all subsequent expenses) expense you can however usually do it more efficiently. Date, account and category will not be reset each time, so often you need at least not change account. More importantly &eqonomize; remembers the last expense entered for each unique description. When you enter a description, all values, except date, will be filled in with the properties of the last expense with the same description. Even more so, as you type the description a list will pop up with all previous descriptions with matching opening letters. This means that you often will follow this much shorter process:
			<orderedlist>
				<listitem><para>Type the first letter of a description and select the correct one from the list.</para></listitem>
				<listitem><para>Check if the cost is the same this time and press enter.</para></listitem>
				<listitem><para>Press enter to move past the quantity field, if enabled.</para></listitem>
				<listitem><para>Check the date and press enter.</para></listitem>
			</orderedlist>
		</para>
	</sect2>
	<sect2 id="transactions_incomes">
		<title>Incomes</title>
		<para>
			The same process as for recording expenses is repeated for incomes, except that the quantity field is absent. Click the incomes icon on the left and enter an income instead of a cost (still positive, but instead means amount deposited, added, to the account).
		</para>
	</sect2>
	<sect2 id="transactions_transfer">
		<title>Transfers</title>
		<para>
			The record a transfer from one account to another (for example an ATM withdrawal from a bank account to cash) follow the same process as for expenses and incomes. Click the transfer icon on the left. Enter the amount transferred (positive) and select the from account (withdrawn from) and the to account (deposited to).
		</para>
	</sect2>
	<sect2 id="refunds_and_repayments">
		<title>Refunds &amp; Repayments</title>
		<para>
			You should record a refund instead of an income when you receive money as a refund for a previous expense, to get the statistics right. This can for example be if you return a product and get your money back, or if you buy a present that you and your friend will give to a mutual friend, and you receive your friends share of the cost later.
		</para>		
		<para>
			The record a new refund use <menuchoice><guimenu>Transactions</guimenu><guimenuitem>New Refund/Repayment</guimenuitem></menuchoice> or the context menu with the refunded expense selected in the expense list. You will have to enter the amount of money refunded (initially set to full refund) and the date of the refund. In addition you should specify the product quantity returned by you. In the first case this is clearly 1, but in the second case this is less clear. It can either be 0.5 if you count it as a half product, or 0 if considered a whole gift (none returned). The use is more obvious if the quantity property is activated for all expenses and incomes. The refund is recorded as an expense with negative cost and quantity.
			<mediaobject><imageobject><imagedata format="PNG" fileref="refund.png"/></imageobject></mediaobject>
		</para>
		<para>
			Repayments are used as refunds, but for incomes that you have been forced to repay.
		</para>
	</sect2>
</sect1>

<sect1 id="saving">
	<title>Saving</title>
	<para>
		When you have made some changes you need to save your work. Save the file using <menuchoice><guimenu>File</guimenu><guimenuitem>Save</guimenuitem></menuchoice> (<keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo>) or the corresponding toolbar button. The first time your work is saved &eqonomize; will ask for a location and name for the file. &eqonomize; will then automatically open that file each time the program is started.
	</para>	
	<para>
		If when exiting &eqonomize; there are some changes that have been made after the last save, you will be asked if the file should be saved before closing. If you in the dialog toggle <guilabel>Do not ask again</guilabel> and click <guibutton>Yes</guibutton> the file will automatically be saved each time &eqonomize; is closed.
		<mediaobject><imageobject><imagedata format="PNG" fileref="ask-save.png"/></imageobject></mediaobject>
	</para>
	<para>
		Before the file is saved, a backup copy is made with the name prefixed by <quote>~</quote>. Also, at most once per minute, the current data is saved (in the default KDE autosave folder, usually ~/autosave), to prevent data loss in case &eqonomize; exits unexpectedly (if for example you by accident hit the reset button on the computer).
	</para>
</sect1>

<sect1 id="import_export">
	<title>Import &amp; Export of Data</title>
	<sect2 id="qif_import">
		<title>QIF Import</title>		
		<para>
			Select <menuchoice><guimenu>File</guimenu><guisubmenu>Import</guisubmenu><guimenuitem>Import QIF File...</guimenuitem></menuchoice> and follow the instructions. QIF is a file format that might differ much depending on the software that saved the file. How much details you will need to provide about the file depends on ambiguity of the date format, how localised the file is, and how well accounts are defined. Securities, investment transactions, memorised transactions, budgets, and classes are not imported.
			<mediaobject><imageobject><imagedata format="PNG" fileref="qif-date-format.png"/></imageobject></mediaobject>
		</para>		
	</sect2>
	<sect2 id="csv_import">
		<title>CSV Import</title>
		<para>
			This function imports data files with clear text values in columns separated by a character (comma, space, tab, etc.), with a new transaction on each row. Select <menuchoice><guimenu>File</guimenu><guisubmenu>Import</guisubmenu><guimenuitem>Import CSV File...</guimenuitem></menuchoice> and enter details about the structure of the file you want to import. Transaction parameters can either be imported from a column in the file or a set to a specified value.
			<mediaobject><imageobject><imagedata format="PNG" fileref="csv-columns.png"/></imageobject></mediaobject>
		</para>
	</sect2>
</sect1>
</chapter>

<chapter id="accounting">
	<title>Accounting with &eqonomize;</title>
	
	<sect1 id="accounting-overview">
		<title>Overview</title>
		
		<para>
			The basics principle behind accounting in &eqonomize; is the idea of money flowing through transactions between accounts as reservoirs. A transaction represents a gain (you receive money), loss (you buy something), or transformation (you withdraw from or deposit in a bank account) of money.
		</para>
		<para>
			A transaction always means that money is moved from one account to another. An expense (something is bought) can for example mean that you pay with cash from your cash account. The money is then put in an expense account. This account represents the products and services you pay for. It represents the money that you do not have as a result of expenses, and is therefor useful for record keeping.
		</para>
		<para>
			Incomes is usually put in a bank account and withdrawn from an income account. This means that income accounts will have a negative value, but to avoid confusion, the value of income accounts are shown as positive values.
		</para>
		<para>
			Different income and expense accounts are used for categorisation, and are therefor more naturally referred to as categories. Other accounts, which represents the money you actually have and often are real world bank accounts, are simply referred to as accounts.
		</para>
		
	</sect1>
	
	<sect1 id="accounting-accounts">
		<title>Accounts and Categories</title>
    <sect2 id="Assets &amp; Liabilities">
		  <para>
		    
		  </para>
		</sect1>
		
	</sect1>
	
	<sect1 id="accounting-transactions">
		<title>Transactions</title>
		<para>
			&eqonomize; has three different basic transactions types – expenses, incomes, and transfers. Securities uses some special transactions which are described in <xref linkend="accounting-securities"/>.
		</para>
		<para>
			Expenses represents a loss of money, a transaction where you give away money, mostly in return for something else. This can be a payment for products and services, or a gift (or you lend someone money).
		</para>
		<para>
			Incomes represents a gain of money; when you are given money. This is when your at the other end of an expense, when you receive payment for products and services you provide (often as salary for your regular job), or when someone gives you money as a gift or loan.
		</para>
		<para>
			The third transaction type, the transfer, represents neither a loss nor gain, but a transfer of money from one account to another. This can for example be when you withdraw money from your bank account as cash, or you transfer money to a savings account.
		</para>
		<para>
			Each transaction has a number of mandatory or optional properties. All the basic transactions have four mandatory properties – value, date, and from and to accounts/categories. Value represents the amount of money that is affected by the transaction, date when the transaction occurred, from account where the money was taken from and to account where money was put. These are the generic property names, which shows that all transaction types basically are the same.
		</para>
		<para>
			For expenses the value is a cost, a positive value representing a loss of money and the to account/category is called category and the from account/category is the account that the expense is payed from. The category is always an expense category and the from account/category an account.
		</para>
		<para>
			For incomes the value is an income, a positive value representing a gain of money and the from account/category is called category and the the to account/category is the account that the income is deposited in. The category is always an income category and the to/from account an account.
		</para>
		<para>
			For transfers the value is called amount, and the to and from accounts/categories are both accounts.
		</para>
		<table id="qalculate-TBL-mandatory-properties" frame="topbot" colsep="1">
			<title>Mandatory Properties</title>
			<tgroup cols="2" colsep="1" rowsep="0">
				<colspec colname="COLSPEC0"/>
				<colspec colname="COLSPEC1"/>
				<colspec colname="COLSPEC2"/>
				<colspec colname="COLSPEC3"/>
				<thead>
					<row valign="top">
						<entry colname="COLSPEC0"><para>Generic</para></entry>
						<entry colname="COLSPEC1"><para>Expense</para></entry>
						<entry colname="COLSPEC2"><para>Income</para></entry>
						<entry colname="COLSPEC2"><para>Transfer</para></entry>
					</row>
				</thead>
				<tbody>
					<row valign="top">
						<entry><para>Value</para></entry>
						<entry><para>Cost</para></entry>
						<entry><para>Income</para></entry>
						<entry><para>Amount</para></entry>
					</row>
					<row valign="top">
						<entry><para>Date</para></entry>
						<entry><para>Date</para></entry>
						<entry><para>Date</para></entry>
						<entry><para>Date</para></entry>
					</row>
					<row valign="top">
						<entry><para>From Account/Category</para></entry>
						<entry><para>Account (account)</para></entry>
						<entry><para>Category (income category)</para></entry>
						<entry><para>From (account)</para></entry>
					</row>
					<row valign="top">
						<entry><para>To Account/Category</para></entry>
						<entry><para>Category (expense category)</para></entry>
						<entry><para>Account (account)</para></entry>
						<entry><para>To (account)</para></entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			All transactions do in addition have three optional properties. The description property provides information about the nature of the transaction. For expenses and incomes this can be considered a flexible subcategory. The comment property is used for any additional information, not used for categorisation, about the transaction. If you for example buy a pair of shoes, you might create an expense in a clothing category, with the description <quote>Shoes</quote> and comments <quote>Shiny red Pradas</quote>. The third property, <quote>Associated File</quote>, allows you to specify a link to file on the computer which will be connected to the transaction. This will typically be receipt, invoice or payslip, but any file can be selected. The file will not be moved, copied or modified. If the file is moved or renamed outside of &eqonomize;, the file will not be accessible from within the program. 
		</para>
		<para>
			Expenses have two additional properties which can be show or hidden using <menuchoice><guimenu>Settings</guimenu><guimenuitem>Use Additional Transaction Properties</guimenuitem></menuchoice> (deactivating this option will not permanently remove any properties from already entered transactions). The quantity property denotes how many entities was involved in the transaction. This can be a whole number, as in two CD's, or a fraction, as in 0.56 kg apples (units are not included). This property is by default set to 1 and does not affect the value (the value per entity equals the value divided by the quantity). Expenses also have a payee property for the person or entity, for example the store where goods where bought, which receives the money. Incomes also have the payer property for the one who gives you the money, for example your employer.
		</para>
		<sect2 id="The value input field">
		  <para>
		    The input field for transaction values support basic arithmetics. Addition, subtraction, multiplication, division and exponentiation are supported and uses standard order of operations (1+2*3 equals 7, not 9). Parentheses can not be used. 
		  </para>
		  <para>
		    Currency conversion are also supported. Currencies will be converted to the currency of the currently selected account of the transaction. Note that the currency symbols used for conversion must be unambiguous. Symbols used for multiple currencies are not allowed (e.g. $ is used by many currencies, and you should therefor type USD instead for conversion from U.S. dollars), except for the main currency.
		  </para>
		  <para>
		    By default the value field uses the current currency as prefix or suffix. This can be omitted when entering a new value and are ignored when using currency conversion (expressions similar to <quote>£5 €</quote> are allowed).
		  </para>
		    If arithmetics or conversion have been used the calculated expression is copied to the comments field, if empty.
		  <para>
		  </para>
		</sect2>
	</sect1>
	<sect1 id="split_transactions">
		<title>Split Transactions</title>
		<para>
			Split transactions are used when a transfer to/from an account is instantly used for multiple transactions. This is not when money is withdrawn from a bank account through an ATM and you go shopping (that is first a transfer from a bank account to cash, then multiple regular expenses). A split transaction can for example be appropriate when you pay with your credit card in a store and tell them to withdraw some extra money, which you get as cash in your hand. You might also use splits when multiple products is bought with the same payment.
		</para>
		<para>
			It is up to you how and when you want to use split transactions, as multiple ordinary transactions can be used with the same end result, even though one way might be a bit more correct than the other.
		</para>		
		<para>
			You can create a split from scratch with <menuchoice><guimenu>Transactions</guimenu><guimenuitem>New Split Transaction...</guimenuitem></menuchoice> or from the context menu. It is however often more efficient to use the join action. This way you can enter transactions the usual way and later join them in a split transactions. Select the transactions to join and activate <guimenuitem>Join Transactions...</guimenuitem> from the <guimenu>Transactions</guimenu> menu or the context menu, and enter a description. All transactions in a split transaction have a common date and account.
			<mediaobject><imageobject><imagedata format="PNG" fileref="split-transaction.png"/></imageobject></mediaobject>
		</para>
		<para>
			To reverse the action and transform transactions in a split transaction to ordinary transactions, select a transaction and use <guimenuitem>Split Up</guimenuitem>.
		</para>
		<para>
			In transaction list (ledger) for the account associated with the split, the split will be shown as only one transaction, but everywhere else the parts of the split will appear as ordinary transactions.
		</para>
	</sect1>
	
	<sect1 id="accounting-schedule">
		<title>Scheduled Transactions</title>
		
		<para>
			A scheduled transaction is a transaction that is planned to occur, thus it has not occurred yet. It is basically just a transaction, of any type, that has a date set in the future. When a scheduled transaction has occurred, it becomes a regular transaction. Scheduled transactions makes it possible to keep track of and be reminded of future transactions. &eqonomize; will request for a confirmation when the transaction is expected to have occurred.
		</para>
		<para>
			A scheduled transaction can be recurring, thus it will regularly occur on a certain date or with a certain interval. This is useful mostly for bills and salaries, which then need not be entered manually each time and you can check &eqonomize; for upcoming payments. When a scheduled recurring transaction has occurred, a regular transaction is created, the occurrence date is removed from the recurrence, and the scheduled transaction date is moved forward to the next occurrence. A scheduled transaction with no occurrences left is removed.
		</para>
		<para>
			Single occurrence scheduled transactions are create just like ordinary transactions, except with a future date. Recurring transactions can only be created from the dialogs, with recurrences specified in the second tab.
			<mediaobject><imageobject><imagedata format="PNG" fileref="recurrence.png"/></imageobject></mediaobject>
		</para>		
		<para>
			The next occurrence of each scheduled transaction is displayed in the schedule view. You can edit or delete either the single occurrence or all future recurrences. If a single occurrence is edited, it will be created as a separate transaction, and any changes made to all recurrences will not affect this occurrence. If the date is changed to the current or a past date, the scheduled transaction becomes an ordinary transaction.
			<mediaobject><imageobject><imagedata format="PNG" fileref="schedule-view.png"/></imageobject></mediaobject>
		</para>		
		<para>
			When a scheduled transaction is due, when the current date has gone past the date of the occurrence (or same date after 6 pm), &eqonomize; will ask you to confirm that the transaction really has occurred. You are then given the option to accept the transaction as it is, make some changes (for example the cost of your telephone bill might vary slightly), or postpone it. If the scheduled transaction is not postponed, it will become an ordinary transaction.
			<mediaobject><imageobject><imagedata format="PNG" fileref="confirm-schedule.png"/></imageobject></mediaobject>
		</para>
	</sect1>
  <sect1 id="accounting-securities">
	  <title>Securities</title>
	  <para>
		  Securities represents money invested in stock, bonds and mutual funds. &eqonomize; does not differentiate between different kinds of securities, even though the terminology used is better suited for some. Securities and associated statistics are displayed in the securities view (accessed using the icons on the left).
	  </para>	
	  <para>
		  The create a new security in &eqonomize; use <menuchoice><guimenu>Securities</guimenu><guimenuitem>New Security...</guimenuitem></menuchoice> or the <guibutton>New Security...</guibutton> button. First select account. Securities are associated with an account of securities type, which cannot be associated with ordinary transactions. Enter name of the security and select type. Specify initial shares if you do not want to back-track all transactions (it is always preferred to use transactions instead, for better statistics). Specify then also date and quotation.
		  <mediaobject><imageobject><imagedata format="PNG" fileref="new-security.png"/></imageobject></mediaobject>
	  </para>
	  <sect2 id="security_transactions">
		  <title>Security Transactions</title>
		  <para>
			  The following transactions are supported for securities:
			  <variablelist>
				  <varlistentry><term>Shares bought</term><listitem><para>When more shares of a security have been bought. Specify new shares, price per share (quotation given) and total cost, including fees/commission.<mediaobject><imageobject><imagedata format="PNG" fileref="security-buy.png"/></imageobject></mediaobject></para></listitem></varlistentry>
				  <varlistentry><term>Shares sold</term><listitem><para>When some shares of a security have been sold. Specify new shares, price per share and total cost, including fees/commission.</para></listitem></varlistentry>
				  <varlistentry><term>Shares traded</term><listitem><para>When shares of one security are sold and shares of another security are bought for the same amount of money, without transfer of sell income to an account in between.</para></listitem></varlistentry>
				  <varlistentry><term>Dividend</term><listitem><para>When money is received for each share of a security. Specify income and income category.</para></listitem></varlistentry>
				  <varlistentry><term>Reinvested dividend</term><listitem><para>When dividend is received as additional shares.</para></listitem></varlistentry>
			  </variablelist>
		  </para>
		  <para>
			  All security transactions are listed listed as transfers (in the transfers view), except dividends, and shares bought if associated with an income category, which are displayed as incomes. You can list all transactions for a single security using <menuchoice><guimenu>Securities</guimenu><guimenuitem>Transactions...</guimenuitem></menuchoice> (or the context menu).
		  </para>
	  </sect2>
	  <sect2 id="securities_view">
		  <title>The Securities View</title>
		  <mediaobject><imageobject><imagedata format="PNG" fileref="securities-view.png"/></imageobject></mediaobject>
		  <para>
			  Statistics displayed for each security:
			  <variablelist>
				  <varlistentry><term>Value</term><listitem><para>Value at period end date date (quotation * shares).</para></listitem></varlistentry>
				  <varlistentry><term>Quotation</term><listitem><para>Price per share at period end date.</para></listitem></varlistentry>
				  <varlistentry><term>Shares</term><listitem><para>Shares at period end date.</para></listitem></varlistentry>
				  <varlistentry><term>Cost</term><listitem><para>Total price paid for all buys minus sells, at end date.</para></listitem></varlistentry>
				  <varlistentry><term>Profit</term><listitem><para>Profit during the period (value + dividends - cost).</para></listitem></varlistentry>
				  <varlistentry><term>Yearly Rate</term><listitem><para>Percent increase of value per share (for a share bought at the beginning of the period), during the period on a yearly basis. Includes dividends.</para></listitem></varlistentry>
			  </variablelist>
			  In the total statistics displayed below the security list, quotation and yearly rate are weighted based on the value of each security.
		  </para>
		  <para>
			  Predictions are simplistic and base on previous development, with respect to dividends and quotations, only. Future quotations are calculated using quotations during the nearest past time. The quotation one month from current date is assumed to have increased at the same rate as during the past month (or the date before with a specified quotation). Dividends are always predicted using full past years (they are assumed to occur on a yearly basis).
		  </para>
	  </sect2>
  </sect1>
  <sect1 id="accounting-currencies">
	  <title>Using Multiple Currencies</title>
	  <para>
		  &eqonomize; support per account currencies. A different currency can be selected for each account (for assets and liabilities). 
	  </para>
	  <para>
		  The sum of values from accounts in different currencies and the total value and change of categories (for example in the accounts view, or in the statistical reports and diagrams) will be shown in the main currency. By default the main currency is set to the currency of the system default location, but this can be changed from the settings menu, or in the edit dialog of each currency.
	  </para>
	  <para>
		  
	  </para>
	  <para>
		  
	  </para>
	</sect1>
</chapter>

<chapter id="commands">
<title>Command Reference</title>

<sect1 id="eqonomize-mainwindow">
<title>The main &eqonomize; window</title>

<sect2>
<title>The File Menu</title>
<para>
<variablelist>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>N</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Creates a new document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>S</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>Q</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Quit</guimenuitem>
</menuchoice></term>
<listitem><para><action>Quits</action> &eqonomize;</para></listitem>
</varlistentry>
</variablelist>
</para>

</sect2>

<sect2>
<title>The <guimenu>Help</guimenu> Menu</title>

&help.menu.documentation;

</sect2>

</sect1>
</chapter>

<chapter id="faq">
<title>Questions and Answers</title>

<qandaset id="faqlist">
<qandaentry>
<question>
<para></para>
</question>
<answer>
	<para></para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">

<!-- Include credits for the programmers, documentation writers, and
contributors here. The license for your software should then be included below
the credits with a reference to the appropriate license file included in the KDE
distribution. -->

<title>Credits and License</title>

<para>
&eqonomize;
</para>
<para>
Program copyright 2017 Hanna Knutsson <email>hanna_k@fmgirl.com</email>
</para>
<para>
Contributors:
<itemizedlist>
<listitem><para>Hanna Knutsson <email>hanna_k@fmgirl.com</email></para>
</listitem>
</itemizedlist>
</para>

<para>
Documentation copyright 2017 Hanna Knutsson <email>hanna_k@fmgirl.com</email>
</para>

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;               <!-- FDL: do not remove -->

<!-- Determine which license your application is licensed under, 
     and delete all the remaining licenses below:

     (NOTE:  All documentation are licensed under the FDL, 
     regardless of what license the application uses) -->

&underGPL;        	 <!-- GPL License -->

</chapter>

&documentation.index;
</book>

<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab 
-->

